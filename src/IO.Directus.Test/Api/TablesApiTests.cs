/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Directus.Client;
using IO.Directus.Api;
using IO.Directus.Model;

namespace IO.Directus.Test
{
    /// <summary>
    ///  Class for testing TablesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TablesApiTests
    {
        private TablesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TablesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TablesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TablesApi
            //Assert.IsInstanceOfType(typeof(TablesApi), instance, "instance is a TablesApi");
        }

        
        /// <summary>
        /// Test AddColumn
        /// </summary>
        [Test]
        public void AddColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //string tableName = null;
            //string columnName = null;
            //string type = null;
            //string ui = null;
            //bool? hiddenInput = null;
            //bool? hiddenList = null;
            //bool? required = null;
            //int? sort = null;
            //string comment = null;
            //string relationshipType = null;
            //string relatedTable = null;
            //string junctionTable = null;
            //string junctionKeyLeft = null;
            //string junctionKeyRight = null;
            //instance.AddColumn(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
            
        }
        
        /// <summary>
        /// Test AddRow
        /// </summary>
        [Test]
        public void AddRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //string customData = null;
            //instance.AddRow(tableId, customData);
            
        }
        
        /// <summary>
        /// Test AddTable
        /// </summary>
        [Test]
        public void AddTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.AddTable(name);
            
        }
        
        /// <summary>
        /// Test DeleteColumn
        /// </summary>
        [Test]
        public void DeleteColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //string columnName = null;
            //instance.DeleteColumn(tableId, columnName);
            
        }
        
        /// <summary>
        /// Test DeleteRow
        /// </summary>
        [Test]
        public void DeleteRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //int? rowId = null;
            //instance.DeleteRow(tableId, rowId);
            
        }
        
        /// <summary>
        /// Test DeleteTable
        /// </summary>
        [Test]
        public void DeleteTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //instance.DeleteTable(tableId);
            
        }
        
        /// <summary>
        /// Test GetTable
        /// </summary>
        [Test]
        public void GetTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //var response = instance.GetTable(tableId);
            //Assert.IsInstanceOf<GetTable> (response, "response is GetTable");
        }
        
        /// <summary>
        /// Test GetTableColumn
        /// </summary>
        [Test]
        public void GetTableColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //string columnName = null;
            //var response = instance.GetTableColumn(tableId, columnName);
            //Assert.IsInstanceOf<GetTableColumn> (response, "response is GetTableColumn");
        }
        
        /// <summary>
        /// Test GetTableColumns
        /// </summary>
        [Test]
        public void GetTableColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //var response = instance.GetTableColumns(tableId);
            //Assert.IsInstanceOf<GetTableColumns> (response, "response is GetTableColumns");
        }
        
        /// <summary>
        /// Test GetTableRow
        /// </summary>
        [Test]
        public void GetTableRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //int? rowId = null;
            //var response = instance.GetTableRow(tableId, rowId);
            //Assert.IsInstanceOf<GetTableRow> (response, "response is GetTableRow");
        }
        
        /// <summary>
        /// Test GetTableRows
        /// </summary>
        [Test]
        public void GetTableRowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //var response = instance.GetTableRows(tableId);
            //Assert.IsInstanceOf<GetTableRows> (response, "response is GetTableRows");
        }
        
        /// <summary>
        /// Test GetTables
        /// </summary>
        [Test]
        public void GetTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTables();
            //Assert.IsInstanceOf<GetTables> (response, "response is GetTables");
        }
        
        /// <summary>
        /// Test UpdateColumn
        /// </summary>
        [Test]
        public void UpdateColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //string columnName = null;
            //string dataType = null;
            //string ui = null;
            //bool? hiddenInput = null;
            //bool? hiddenList = null;
            //bool? required = null;
            //int? sort = null;
            //string comment = null;
            //string relationshipType = null;
            //string relatedTable = null;
            //string junctionTable = null;
            //string junctionKeyLeft = null;
            //string junctionKeyRight = null;
            //instance.UpdateColumn(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
            
        }
        
        /// <summary>
        /// Test UpdateRow
        /// </summary>
        [Test]
        public void UpdateRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableId = null;
            //int? rowId = null;
            //string customData = null;
            //instance.UpdateRow(tableId, rowId, customData);
            
        }
        
    }

}
