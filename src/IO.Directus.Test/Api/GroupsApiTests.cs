/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Directus.Client;
using IO.Directus.Api;
using IO.Directus.Model;

namespace IO.Directus.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test AddGroup
        /// </summary>
        [Test]
        public void AddGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.AddGroup(name);
            
        }
        
        /// <summary>
        /// Test AddPrivilege
        /// </summary>
        [Test]
        public void AddPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //int? id = null;
            //string tableName = null;
            //int? allowAdd = null;
            //int? allowEdit = null;
            //int? allowDelete = null;
            //int? allowView = null;
            //int? allowAlter = null;
            //bool? navListed = null;
            //string readFieldBlacklist = null;
            //string writeFieldBlacklist = null;
            //string statusId = null;
            //instance.AddPrivilege(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
            
        }
        
        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Test]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetGroup(groupId);
            //Assert.IsInstanceOf<GetGroup> (response, "response is GetGroup");
        }
        
        /// <summary>
        /// Test GetGroups
        /// </summary>
        [Test]
        public void GetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetGroups();
            //Assert.IsInstanceOf<GetGroups> (response, "response is GetGroups");
        }
        
        /// <summary>
        /// Test GetPrivileges
        /// </summary>
        [Test]
        public void GetPrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetPrivileges(groupId);
            //Assert.IsInstanceOf<GetPrivileges> (response, "response is GetPrivileges");
        }
        
        /// <summary>
        /// Test GetPrivilegesForTable
        /// </summary>
        [Test]
        public void GetPrivilegesForTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string tableNameOrPrivilegeId = null;
            //var response = instance.GetPrivilegesForTable(groupId, tableNameOrPrivilegeId);
            //Assert.IsInstanceOf<GetPrivilegesForTable> (response, "response is GetPrivilegesForTable");
        }
        
        /// <summary>
        /// Test UpdatePrivileges
        /// </summary>
        [Test]
        public void UpdatePrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string tableNameOrPrivilegeId = null;
            //string privilegesId = null;
            //string groupId2 = null;
            //string tableName = null;
            //int? allowAdd = null;
            //int? allowEdit = null;
            //int? allowDelete = null;
            //int? allowView = null;
            //int? allowAlter = null;
            //bool? navListed = null;
            //string readFieldBlacklist = null;
            //string writeFieldBlacklist = null;
            //string statusId = null;
            //instance.UpdatePrivileges(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
            
        }
        
    }

}
