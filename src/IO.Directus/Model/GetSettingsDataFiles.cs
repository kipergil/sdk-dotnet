/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Directus.Client.SwaggerDateConverter;

namespace IO.Directus.Model
{
    /// <summary>
    /// GetSettingsDataFiles
    /// </summary>
    [DataContract]
    public partial class GetSettingsDataFiles :  IEquatable<GetSettingsDataFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSettingsDataFiles" /> class.
        /// </summary>
        /// <param name="AllowedThumbnails">AllowedThumbnails.</param>
        /// <param name="ThumbnailQuality">ThumbnailQuality.</param>
        /// <param name="ThumbnailSize">ThumbnailSize.</param>
        /// <param name="FileNaming">FileNaming.</param>
        /// <param name="ThumbnailCropEnabled">ThumbnailCropEnabled.</param>
        /// <param name="YoutubeApiKey">YoutubeApiKey.</param>
        public GetSettingsDataFiles(string AllowedThumbnails = default(string), string ThumbnailQuality = default(string), string ThumbnailSize = default(string), string FileNaming = default(string), string ThumbnailCropEnabled = default(string), string YoutubeApiKey = default(string))
        {
            this.AllowedThumbnails = AllowedThumbnails;
            this.ThumbnailQuality = ThumbnailQuality;
            this.ThumbnailSize = ThumbnailSize;
            this.FileNaming = FileNaming;
            this.ThumbnailCropEnabled = ThumbnailCropEnabled;
            this.YoutubeApiKey = YoutubeApiKey;
        }
        
        /// <summary>
        /// Gets or Sets AllowedThumbnails
        /// </summary>
        [DataMember(Name="allowed_thumbnails", EmitDefaultValue=false)]
        public string AllowedThumbnails { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailQuality
        /// </summary>
        [DataMember(Name="thumbnail_quality", EmitDefaultValue=false)]
        public string ThumbnailQuality { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailSize
        /// </summary>
        [DataMember(Name="thumbnail_size", EmitDefaultValue=false)]
        public string ThumbnailSize { get; set; }

        /// <summary>
        /// Gets or Sets FileNaming
        /// </summary>
        [DataMember(Name="file_naming", EmitDefaultValue=false)]
        public string FileNaming { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailCropEnabled
        /// </summary>
        [DataMember(Name="thumbnail_crop_enabled", EmitDefaultValue=false)]
        public string ThumbnailCropEnabled { get; set; }

        /// <summary>
        /// Gets or Sets YoutubeApiKey
        /// </summary>
        [DataMember(Name="youtube_api_key", EmitDefaultValue=false)]
        public string YoutubeApiKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSettingsDataFiles {\n");
            sb.Append("  AllowedThumbnails: ").Append(AllowedThumbnails).Append("\n");
            sb.Append("  ThumbnailQuality: ").Append(ThumbnailQuality).Append("\n");
            sb.Append("  ThumbnailSize: ").Append(ThumbnailSize).Append("\n");
            sb.Append("  FileNaming: ").Append(FileNaming).Append("\n");
            sb.Append("  ThumbnailCropEnabled: ").Append(ThumbnailCropEnabled).Append("\n");
            sb.Append("  YoutubeApiKey: ").Append(YoutubeApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSettingsDataFiles);
        }

        /// <summary>
        /// Returns true if GetSettingsDataFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSettingsDataFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSettingsDataFiles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedThumbnails == input.AllowedThumbnails ||
                    (this.AllowedThumbnails != null &&
                    this.AllowedThumbnails.Equals(input.AllowedThumbnails))
                ) && 
                (
                    this.ThumbnailQuality == input.ThumbnailQuality ||
                    (this.ThumbnailQuality != null &&
                    this.ThumbnailQuality.Equals(input.ThumbnailQuality))
                ) && 
                (
                    this.ThumbnailSize == input.ThumbnailSize ||
                    (this.ThumbnailSize != null &&
                    this.ThumbnailSize.Equals(input.ThumbnailSize))
                ) && 
                (
                    this.FileNaming == input.FileNaming ||
                    (this.FileNaming != null &&
                    this.FileNaming.Equals(input.FileNaming))
                ) && 
                (
                    this.ThumbnailCropEnabled == input.ThumbnailCropEnabled ||
                    (this.ThumbnailCropEnabled != null &&
                    this.ThumbnailCropEnabled.Equals(input.ThumbnailCropEnabled))
                ) && 
                (
                    this.YoutubeApiKey == input.YoutubeApiKey ||
                    (this.YoutubeApiKey != null &&
                    this.YoutubeApiKey.Equals(input.YoutubeApiKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedThumbnails != null)
                    hashCode = hashCode * 59 + this.AllowedThumbnails.GetHashCode();
                if (this.ThumbnailQuality != null)
                    hashCode = hashCode * 59 + this.ThumbnailQuality.GetHashCode();
                if (this.ThumbnailSize != null)
                    hashCode = hashCode * 59 + this.ThumbnailSize.GetHashCode();
                if (this.FileNaming != null)
                    hashCode = hashCode * 59 + this.FileNaming.GetHashCode();
                if (this.ThumbnailCropEnabled != null)
                    hashCode = hashCode * 59 + this.ThumbnailCropEnabled.GetHashCode();
                if (this.YoutubeApiKey != null)
                    hashCode = hashCode * 59 + this.YoutubeApiKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
