/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Directus.Client.SwaggerDateConverter;

namespace IO.Directus.Model
{
    /// <summary>
    /// GetTableData
    /// </summary>
    [DataContract]
    public partial class GetTableData :  IEquatable<GetTableData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTableData" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="TableName">TableName.</param>
        /// <param name="Columns">Columns.</param>
        /// <param name="Preferences">Preferences.</param>
        /// <param name="PrimaryColumn">PrimaryColumn.</param>
        /// <param name="Schema">Schema.</param>
        /// <param name="Hidden">Hidden.</param>
        /// <param name="Single">Single.</param>
        /// <param name="DefaultStatus">DefaultStatus.</param>
        /// <param name="UserCreateColumn">UserCreateColumn.</param>
        /// <param name="UserUpdateColumn">UserUpdateColumn.</param>
        /// <param name="DateCreateColumn">DateCreateColumn.</param>
        /// <param name="DateUpdateColumn">DateUpdateColumn.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DateCreated">DateCreated.</param>
        /// <param name="Comment">Comment.</param>
        /// <param name="RowCount">RowCount.</param>
        /// <param name="Footer">Footer.</param>
        /// <param name="ListView">ListView.</param>
        /// <param name="ColumnGroupings">ColumnGroupings.</param>
        /// <param name="FilterColumnBlacklist">FilterColumnBlacklist.</param>
        public GetTableData(string Name = default(string), string Id = default(string), string TableName = default(string), List<Object> Columns = default(List<Object>), Object Preferences = default(Object), string PrimaryColumn = default(string), string Schema = default(string), bool? Hidden = default(bool?), bool? Single = default(bool?), string DefaultStatus = default(string), string UserCreateColumn = default(string), string UserUpdateColumn = default(string), string DateCreateColumn = default(string), string DateUpdateColumn = default(string), string CreatedAt = default(string), string DateCreated = default(string), string Comment = default(string), int? RowCount = default(int?), bool? Footer = default(bool?), string ListView = default(string), string ColumnGroupings = default(string), string FilterColumnBlacklist = default(string))
        {
            this.Name = Name;
            this.Id = Id;
            this.TableName = TableName;
            this.Columns = Columns;
            this.Preferences = Preferences;
            this.PrimaryColumn = PrimaryColumn;
            this.Schema = Schema;
            this.Hidden = Hidden;
            this.Single = Single;
            this.DefaultStatus = DefaultStatus;
            this.UserCreateColumn = UserCreateColumn;
            this.UserUpdateColumn = UserUpdateColumn;
            this.DateCreateColumn = DateCreateColumn;
            this.DateUpdateColumn = DateUpdateColumn;
            this.CreatedAt = CreatedAt;
            this.DateCreated = DateCreated;
            this.Comment = Comment;
            this.RowCount = RowCount;
            this.Footer = Footer;
            this.ListView = ListView;
            this.ColumnGroupings = ColumnGroupings;
            this.FilterColumnBlacklist = FilterColumnBlacklist;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="table_name", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<Object> Columns { get; set; }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name="preferences", EmitDefaultValue=false)]
        public Object Preferences { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryColumn
        /// </summary>
        [DataMember(Name="primary_column", EmitDefaultValue=false)]
        public string PrimaryColumn { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Gets or Sets Single
        /// </summary>
        [DataMember(Name="single", EmitDefaultValue=false)]
        public bool? Single { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStatus
        /// </summary>
        [DataMember(Name="default_status", EmitDefaultValue=false)]
        public string DefaultStatus { get; set; }

        /// <summary>
        /// Gets or Sets UserCreateColumn
        /// </summary>
        [DataMember(Name="user_create_column", EmitDefaultValue=false)]
        public string UserCreateColumn { get; set; }

        /// <summary>
        /// Gets or Sets UserUpdateColumn
        /// </summary>
        [DataMember(Name="user_update_column", EmitDefaultValue=false)]
        public string UserUpdateColumn { get; set; }

        /// <summary>
        /// Gets or Sets DateCreateColumn
        /// </summary>
        [DataMember(Name="date_create_column", EmitDefaultValue=false)]
        public string DateCreateColumn { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdateColumn
        /// </summary>
        [DataMember(Name="date_update_column", EmitDefaultValue=false)]
        public string DateUpdateColumn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="date_created", EmitDefaultValue=false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets RowCount
        /// </summary>
        [DataMember(Name="row_count", EmitDefaultValue=false)]
        public int? RowCount { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public bool? Footer { get; set; }

        /// <summary>
        /// Gets or Sets ListView
        /// </summary>
        [DataMember(Name="list_view", EmitDefaultValue=false)]
        public string ListView { get; set; }

        /// <summary>
        /// Gets or Sets ColumnGroupings
        /// </summary>
        [DataMember(Name="column_groupings", EmitDefaultValue=false)]
        public string ColumnGroupings { get; set; }

        /// <summary>
        /// Gets or Sets FilterColumnBlacklist
        /// </summary>
        [DataMember(Name="filter_column_blacklist", EmitDefaultValue=false)]
        public string FilterColumnBlacklist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTableData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  PrimaryColumn: ").Append(PrimaryColumn).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Single: ").Append(Single).Append("\n");
            sb.Append("  DefaultStatus: ").Append(DefaultStatus).Append("\n");
            sb.Append("  UserCreateColumn: ").Append(UserCreateColumn).Append("\n");
            sb.Append("  UserUpdateColumn: ").Append(UserUpdateColumn).Append("\n");
            sb.Append("  DateCreateColumn: ").Append(DateCreateColumn).Append("\n");
            sb.Append("  DateUpdateColumn: ").Append(DateUpdateColumn).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  ListView: ").Append(ListView).Append("\n");
            sb.Append("  ColumnGroupings: ").Append(ColumnGroupings).Append("\n");
            sb.Append("  FilterColumnBlacklist: ").Append(FilterColumnBlacklist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTableData);
        }

        /// <summary>
        /// Returns true if GetTableData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTableData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTableData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Preferences == input.Preferences ||
                    (this.Preferences != null &&
                    this.Preferences.Equals(input.Preferences))
                ) && 
                (
                    this.PrimaryColumn == input.PrimaryColumn ||
                    (this.PrimaryColumn != null &&
                    this.PrimaryColumn.Equals(input.PrimaryColumn))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Single == input.Single ||
                    (this.Single != null &&
                    this.Single.Equals(input.Single))
                ) && 
                (
                    this.DefaultStatus == input.DefaultStatus ||
                    (this.DefaultStatus != null &&
                    this.DefaultStatus.Equals(input.DefaultStatus))
                ) && 
                (
                    this.UserCreateColumn == input.UserCreateColumn ||
                    (this.UserCreateColumn != null &&
                    this.UserCreateColumn.Equals(input.UserCreateColumn))
                ) && 
                (
                    this.UserUpdateColumn == input.UserUpdateColumn ||
                    (this.UserUpdateColumn != null &&
                    this.UserUpdateColumn.Equals(input.UserUpdateColumn))
                ) && 
                (
                    this.DateCreateColumn == input.DateCreateColumn ||
                    (this.DateCreateColumn != null &&
                    this.DateCreateColumn.Equals(input.DateCreateColumn))
                ) && 
                (
                    this.DateUpdateColumn == input.DateUpdateColumn ||
                    (this.DateUpdateColumn != null &&
                    this.DateUpdateColumn.Equals(input.DateUpdateColumn))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    (this.RowCount != null &&
                    this.RowCount.Equals(input.RowCount))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.ListView == input.ListView ||
                    (this.ListView != null &&
                    this.ListView.Equals(input.ListView))
                ) && 
                (
                    this.ColumnGroupings == input.ColumnGroupings ||
                    (this.ColumnGroupings != null &&
                    this.ColumnGroupings.Equals(input.ColumnGroupings))
                ) && 
                (
                    this.FilterColumnBlacklist == input.FilterColumnBlacklist ||
                    (this.FilterColumnBlacklist != null &&
                    this.FilterColumnBlacklist.Equals(input.FilterColumnBlacklist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.Preferences != null)
                    hashCode = hashCode * 59 + this.Preferences.GetHashCode();
                if (this.PrimaryColumn != null)
                    hashCode = hashCode * 59 + this.PrimaryColumn.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Single != null)
                    hashCode = hashCode * 59 + this.Single.GetHashCode();
                if (this.DefaultStatus != null)
                    hashCode = hashCode * 59 + this.DefaultStatus.GetHashCode();
                if (this.UserCreateColumn != null)
                    hashCode = hashCode * 59 + this.UserCreateColumn.GetHashCode();
                if (this.UserUpdateColumn != null)
                    hashCode = hashCode * 59 + this.UserUpdateColumn.GetHashCode();
                if (this.DateCreateColumn != null)
                    hashCode = hashCode * 59 + this.DateCreateColumn.GetHashCode();
                if (this.DateUpdateColumn != null)
                    hashCode = hashCode * 59 + this.DateUpdateColumn.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.RowCount != null)
                    hashCode = hashCode * 59 + this.RowCount.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.ListView != null)
                    hashCode = hashCode * 59 + this.ListView.GetHashCode();
                if (this.ColumnGroupings != null)
                    hashCode = hashCode * 59 + this.ColumnGroupings.GetHashCode();
                if (this.FilterColumnBlacklist != null)
                    hashCode = hashCode * 59 + this.FilterColumnBlacklist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
