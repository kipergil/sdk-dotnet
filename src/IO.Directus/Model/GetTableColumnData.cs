/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Directus.Client.SwaggerDateConverter;

namespace IO.Directus.Model
{
    /// <summary>
    /// GetTableColumnData
    /// </summary>
    [DataContract]
    public partial class GetTableColumnData :  IEquatable<GetTableColumnData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTableColumnData" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ColumnName">ColumnName.</param>
        /// <param name="Type">Type.</param>
        /// <param name="CharLength">CharLength.</param>
        /// <param name="IsNullable">IsNullable.</param>
        /// <param name="Comment">Comment.</param>
        /// <param name="Sort">Sort.</param>
        /// <param name="System">System.</param>
        /// <param name="Master">Master.</param>
        /// <param name="HiddenList">HiddenList.</param>
        /// <param name="HiddenInput">HiddenInput.</param>
        /// <param name="Required">Required.</param>
        /// <param name="ColumnType">ColumnType.</param>
        /// <param name="IsWritable">IsWritable.</param>
        /// <param name="Ui">Ui.</param>
        /// <param name="Options">Options.</param>
        public GetTableColumnData(string Id = default(string), string ColumnName = default(string), string Type = default(string), string CharLength = default(string), string IsNullable = default(string), string Comment = default(string), int? Sort = default(int?), bool? System = default(bool?), bool? Master = default(bool?), bool? HiddenList = default(bool?), bool? HiddenInput = default(bool?), bool? Required = default(bool?), string ColumnType = default(string), bool? IsWritable = default(bool?), string Ui = default(string), List<Object> Options = default(List<Object>))
        {
            this.Id = Id;
            this.ColumnName = ColumnName;
            this.Type = Type;
            this.CharLength = CharLength;
            this.IsNullable = IsNullable;
            this.Comment = Comment;
            this.Sort = Sort;
            this.System = System;
            this.Master = Master;
            this.HiddenList = HiddenList;
            this.HiddenInput = HiddenInput;
            this.Required = Required;
            this.ColumnType = ColumnType;
            this.IsWritable = IsWritable;
            this.Ui = Ui;
            this.Options = Options;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name="column_name", EmitDefaultValue=false)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets CharLength
        /// </summary>
        [DataMember(Name="char_length", EmitDefaultValue=false)]
        public string CharLength { get; set; }

        /// <summary>
        /// Gets or Sets IsNullable
        /// </summary>
        [DataMember(Name="is_nullable", EmitDefaultValue=false)]
        public string IsNullable { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public int? Sort { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public bool? System { get; set; }

        /// <summary>
        /// Gets or Sets Master
        /// </summary>
        [DataMember(Name="master", EmitDefaultValue=false)]
        public bool? Master { get; set; }

        /// <summary>
        /// Gets or Sets HiddenList
        /// </summary>
        [DataMember(Name="hidden_list", EmitDefaultValue=false)]
        public bool? HiddenList { get; set; }

        /// <summary>
        /// Gets or Sets HiddenInput
        /// </summary>
        [DataMember(Name="hidden_input", EmitDefaultValue=false)]
        public bool? HiddenInput { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets ColumnType
        /// </summary>
        [DataMember(Name="column_type", EmitDefaultValue=false)]
        public string ColumnType { get; set; }

        /// <summary>
        /// Gets or Sets IsWritable
        /// </summary>
        [DataMember(Name="is_writable", EmitDefaultValue=false)]
        public bool? IsWritable { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [DataMember(Name="ui", EmitDefaultValue=false)]
        public string Ui { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<Object> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTableColumnData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CharLength: ").Append(CharLength).Append("\n");
            sb.Append("  IsNullable: ").Append(IsNullable).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Master: ").Append(Master).Append("\n");
            sb.Append("  HiddenList: ").Append(HiddenList).Append("\n");
            sb.Append("  HiddenInput: ").Append(HiddenInput).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  ColumnType: ").Append(ColumnType).Append("\n");
            sb.Append("  IsWritable: ").Append(IsWritable).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTableColumnData);
        }

        /// <summary>
        /// Returns true if GetTableColumnData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTableColumnData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTableColumnData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ColumnName == input.ColumnName ||
                    (this.ColumnName != null &&
                    this.ColumnName.Equals(input.ColumnName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CharLength == input.CharLength ||
                    (this.CharLength != null &&
                    this.CharLength.Equals(input.CharLength))
                ) && 
                (
                    this.IsNullable == input.IsNullable ||
                    (this.IsNullable != null &&
                    this.IsNullable.Equals(input.IsNullable))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.Master == input.Master ||
                    (this.Master != null &&
                    this.Master.Equals(input.Master))
                ) && 
                (
                    this.HiddenList == input.HiddenList ||
                    (this.HiddenList != null &&
                    this.HiddenList.Equals(input.HiddenList))
                ) && 
                (
                    this.HiddenInput == input.HiddenInput ||
                    (this.HiddenInput != null &&
                    this.HiddenInput.Equals(input.HiddenInput))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.ColumnType == input.ColumnType ||
                    (this.ColumnType != null &&
                    this.ColumnType.Equals(input.ColumnType))
                ) && 
                (
                    this.IsWritable == input.IsWritable ||
                    (this.IsWritable != null &&
                    this.IsWritable.Equals(input.IsWritable))
                ) && 
                (
                    this.Ui == input.Ui ||
                    (this.Ui != null &&
                    this.Ui.Equals(input.Ui))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ColumnName != null)
                    hashCode = hashCode * 59 + this.ColumnName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CharLength != null)
                    hashCode = hashCode * 59 + this.CharLength.GetHashCode();
                if (this.IsNullable != null)
                    hashCode = hashCode * 59 + this.IsNullable.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.Master != null)
                    hashCode = hashCode * 59 + this.Master.GetHashCode();
                if (this.HiddenList != null)
                    hashCode = hashCode * 59 + this.HiddenList.GetHashCode();
                if (this.HiddenInput != null)
                    hashCode = hashCode * 59 + this.HiddenInput.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.ColumnType != null)
                    hashCode = hashCode * 59 + this.ColumnType.GetHashCode();
                if (this.IsWritable != null)
                    hashCode = hashCode * 59 + this.IsWritable.GetHashCode();
                if (this.Ui != null)
                    hashCode = hashCode * 59 + this.Ui.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
