/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Directus.Client.SwaggerDateConverter;

namespace IO.Directus.Model
{
    /// <summary>
    /// GetTableColumnsData
    /// </summary>
    [DataContract]
    public partial class GetTableColumnsData :  IEquatable<GetTableColumnsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTableColumnsData" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ColumnName">ColumnName.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Length">Length.</param>
        /// <param name="Precision">Precision.</param>
        /// <param name="Scale">Scale.</param>
        /// <param name="Sort">Sort.</param>
        /// <param name="DefaultValue">DefaultValue.</param>
        /// <param name="Nullable">Nullable.</param>
        /// <param name="Key">Key.</param>
        /// <param name="ExtraOptions">ExtraOptions.</param>
        /// <param name="Options">Options.</param>
        /// <param name="TableName">TableName.</param>
        /// <param name="Required">Required.</param>
        /// <param name="Ui">Ui.</param>
        /// <param name="HiddenList">HiddenList.</param>
        /// <param name="HiddenInput">HiddenInput.</param>
        /// <param name="Relationship">Relationship.</param>
        /// <param name="Comment">Comment.</param>
        public GetTableColumnsData(string Name = default(string), string Id = default(string), string ColumnName = default(string), string Type = default(string), string Length = default(string), int? Precision = default(int?), int? Scale = default(int?), int? Sort = default(int?), string DefaultValue = default(string), bool? Nullable = default(bool?), string Key = default(string), List<Object> ExtraOptions = default(List<Object>), List<Object> Options = default(List<Object>), string TableName = default(string), bool? Required = default(bool?), string Ui = default(string), bool? HiddenList = default(bool?), bool? HiddenInput = default(bool?), string Relationship = default(string), string Comment = default(string))
        {
            this.Name = Name;
            this.Id = Id;
            this.ColumnName = ColumnName;
            this.Type = Type;
            this.Length = Length;
            this.Precision = Precision;
            this.Scale = Scale;
            this.Sort = Sort;
            this.DefaultValue = DefaultValue;
            this.Nullable = Nullable;
            this.Key = Key;
            this.ExtraOptions = ExtraOptions;
            this.Options = Options;
            this.TableName = TableName;
            this.Required = Required;
            this.Ui = Ui;
            this.HiddenList = HiddenList;
            this.HiddenInput = HiddenInput;
            this.Relationship = Relationship;
            this.Comment = Comment;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name="column_name", EmitDefaultValue=false)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Gets or Sets Precision
        /// </summary>
        [DataMember(Name="precision", EmitDefaultValue=false)]
        public int? Precision { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public int? Scale { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public int? Sort { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="default_value", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Nullable
        /// </summary>
        [DataMember(Name="nullable", EmitDefaultValue=false)]
        public bool? Nullable { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets ExtraOptions
        /// </summary>
        [DataMember(Name="extra_options", EmitDefaultValue=false)]
        public List<Object> ExtraOptions { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<Object> Options { get; set; }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="table_name", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [DataMember(Name="ui", EmitDefaultValue=false)]
        public string Ui { get; set; }

        /// <summary>
        /// Gets or Sets HiddenList
        /// </summary>
        [DataMember(Name="hidden_list", EmitDefaultValue=false)]
        public bool? HiddenList { get; set; }

        /// <summary>
        /// Gets or Sets HiddenInput
        /// </summary>
        [DataMember(Name="hidden_input", EmitDefaultValue=false)]
        public bool? HiddenInput { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTableColumnsData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Nullable: ").Append(Nullable).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ExtraOptions: ").Append(ExtraOptions).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("  HiddenList: ").Append(HiddenList).Append("\n");
            sb.Append("  HiddenInput: ").Append(HiddenInput).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTableColumnsData);
        }

        /// <summary>
        /// Returns true if GetTableColumnsData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTableColumnsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTableColumnsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ColumnName == input.ColumnName ||
                    (this.ColumnName != null &&
                    this.ColumnName.Equals(input.ColumnName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Precision == input.Precision ||
                    (this.Precision != null &&
                    this.Precision.Equals(input.Precision))
                ) && 
                (
                    this.Scale == input.Scale ||
                    (this.Scale != null &&
                    this.Scale.Equals(input.Scale))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Nullable == input.Nullable ||
                    (this.Nullable != null &&
                    this.Nullable.Equals(input.Nullable))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.ExtraOptions == input.ExtraOptions ||
                    this.ExtraOptions != null &&
                    this.ExtraOptions.SequenceEqual(input.ExtraOptions)
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Ui == input.Ui ||
                    (this.Ui != null &&
                    this.Ui.Equals(input.Ui))
                ) && 
                (
                    this.HiddenList == input.HiddenList ||
                    (this.HiddenList != null &&
                    this.HiddenList.Equals(input.HiddenList))
                ) && 
                (
                    this.HiddenInput == input.HiddenInput ||
                    (this.HiddenInput != null &&
                    this.HiddenInput.Equals(input.HiddenInput))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ColumnName != null)
                    hashCode = hashCode * 59 + this.ColumnName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Precision != null)
                    hashCode = hashCode * 59 + this.Precision.GetHashCode();
                if (this.Scale != null)
                    hashCode = hashCode * 59 + this.Scale.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Nullable != null)
                    hashCode = hashCode * 59 + this.Nullable.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.ExtraOptions != null)
                    hashCode = hashCode * 59 + this.ExtraOptions.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Ui != null)
                    hashCode = hashCode * 59 + this.Ui.GetHashCode();
                if (this.HiddenList != null)
                    hashCode = hashCode * 59 + this.HiddenList.GetHashCode();
                if (this.HiddenInput != null)
                    hashCode = hashCode * 59 + this.HiddenInput.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
