/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Directus.Client;
using IO.Directus.Model;

namespace IO.Directus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns></returns>
        void AddColumn (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);

        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddColumnWithHttpInfo (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);
        /// <summary>
        /// Add a new row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns></returns>
        void AddRow (string tableId, string customData);

        /// <summary>
        /// Add a new row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddRowWithHttpInfo (string tableId, string customData);
        /// <summary>
        /// Add a new table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns></returns>
        void AddTable (string name = null);

        /// <summary>
        /// Add a new table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddTableWithHttpInfo (string name = null);
        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns></returns>
        void DeleteColumn (string tableId, string columnName);

        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteColumnWithHttpInfo (string tableId, string columnName);
        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns></returns>
        void DeleteRow (string tableId, int? rowId);

        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRowWithHttpInfo (string tableId, int? rowId);
        /// <summary>
        /// Delete Table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns></returns>
        void DeleteTable (string tableId);

        /// <summary>
        /// Delete Table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTableWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTable</returns>
        GetTable GetTable (string tableId);

        /// <summary>
        /// Returns specific table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTable</returns>
        ApiResponse<GetTable> GetTableWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>GetTableColumn</returns>
        GetTableColumn GetTableColumn (string tableId, string columnName);

        /// <summary>
        /// Returns specific table column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>ApiResponse of GetTableColumn</returns>
        ApiResponse<GetTableColumn> GetTableColumnWithHttpInfo (string tableId, string columnName);
        /// <summary>
        /// Returns table columns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTableColumns</returns>
        GetTableColumns GetTableColumns (string tableId);

        /// <summary>
        /// Returns table columns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTableColumns</returns>
        ApiResponse<GetTableColumns> GetTableColumnsWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>GetTableRow</returns>
        GetTableRow GetTableRow (string tableId, int? rowId);

        /// <summary>
        /// Returns specific table row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>ApiResponse of GetTableRow</returns>
        ApiResponse<GetTableRow> GetTableRowWithHttpInfo (string tableId, int? rowId);
        /// <summary>
        /// Returns table rows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTableRows</returns>
        GetTableRows GetTableRows (string tableId);

        /// <summary>
        /// Returns table rows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTableRows</returns>
        ApiResponse<GetTableRows> GetTableRowsWithHttpInfo (string tableId);
        /// <summary>
        /// Returns tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetTables</returns>
        GetTables GetTables ();

        /// <summary>
        /// Returns tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetTables</returns>
        ApiResponse<GetTables> GetTablesWithHttpInfo ();
        /// <summary>
        /// Update column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns></returns>
        void UpdateColumn (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);

        /// <summary>
        /// Update column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateColumnWithHttpInfo (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);
        /// <summary>
        /// Update row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns></returns>
        void UpdateRow (string tableId, int? rowId, string customData);

        /// <summary>
        /// Update row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRowWithHttpInfo (string tableId, int? rowId, string customData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddColumnAsync (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);

        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddColumnAsyncWithHttpInfo (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);
        /// <summary>
        /// Add a new row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddRowAsync (string tableId, string customData);

        /// <summary>
        /// Add a new row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRowAsyncWithHttpInfo (string tableId, string customData);
        /// <summary>
        /// Add a new table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddTableAsync (string name = null);

        /// <summary>
        /// Add a new table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTableAsyncWithHttpInfo (string name = null);
        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteColumnAsync (string tableId, string columnName);

        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteColumnAsyncWithHttpInfo (string tableId, string columnName);
        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRowAsync (string tableId, int? rowId);

        /// <summary>
        /// Delete row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRowAsyncWithHttpInfo (string tableId, int? rowId);
        /// <summary>
        /// Delete Table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTableAsync (string tableId);

        /// <summary>
        /// Delete Table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTableAsyncWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTable</returns>
        System.Threading.Tasks.Task<GetTable> GetTableAsync (string tableId);

        /// <summary>
        /// Returns specific table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTable>> GetTableAsyncWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of GetTableColumn</returns>
        System.Threading.Tasks.Task<GetTableColumn> GetTableColumnAsync (string tableId, string columnName);

        /// <summary>
        /// Returns specific table column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of ApiResponse (GetTableColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTableColumn>> GetTableColumnAsyncWithHttpInfo (string tableId, string columnName);
        /// <summary>
        /// Returns table columns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTableColumns</returns>
        System.Threading.Tasks.Task<GetTableColumns> GetTableColumnsAsync (string tableId);

        /// <summary>
        /// Returns table columns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTableColumns)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTableColumns>> GetTableColumnsAsyncWithHttpInfo (string tableId);
        /// <summary>
        /// Returns specific table row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of GetTableRow</returns>
        System.Threading.Tasks.Task<GetTableRow> GetTableRowAsync (string tableId, int? rowId);

        /// <summary>
        /// Returns specific table row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of ApiResponse (GetTableRow)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTableRow>> GetTableRowAsyncWithHttpInfo (string tableId, int? rowId);
        /// <summary>
        /// Returns table rows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTableRows</returns>
        System.Threading.Tasks.Task<GetTableRows> GetTableRowsAsync (string tableId);

        /// <summary>
        /// Returns table rows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTableRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTableRows>> GetTableRowsAsyncWithHttpInfo (string tableId);
        /// <summary>
        /// Returns tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetTables</returns>
        System.Threading.Tasks.Task<GetTables> GetTablesAsync ();

        /// <summary>
        /// Returns tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetTables)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTables>> GetTablesAsyncWithHttpInfo ();
        /// <summary>
        /// Update column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateColumnAsync (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);

        /// <summary>
        /// Update column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateColumnAsyncWithHttpInfo (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null);
        /// <summary>
        /// Update row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRowAsync (string tableId, int? rowId, string customData);

        /// <summary>
        /// Update row
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRowAsyncWithHttpInfo (string tableId, int? rowId, string customData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TablesApi : ITablesApi
    {
        private IO.Directus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TablesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TablesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Directus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns></returns>
        public void AddColumn (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
             AddColumnWithHttpInfo(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddColumnWithHttpInfo (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->AddColumn");

            var localVarPath = "/tables/{tableId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (columnName != null) localVarFormParams.Add("column_name", Configuration.ApiClient.ParameterToString(columnName)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (ui != null) localVarFormParams.Add("ui", Configuration.ApiClient.ParameterToString(ui)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("hidden_input", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (hiddenList != null) localVarFormParams.Add("hidden_list", Configuration.ApiClient.ParameterToString(hiddenList)); // form parameter
            if (required != null) localVarFormParams.Add("required", Configuration.ApiClient.ParameterToString(required)); // form parameter
            if (sort != null) localVarFormParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (relationshipType != null) localVarFormParams.Add("relationship_type", Configuration.ApiClient.ParameterToString(relationshipType)); // form parameter
            if (relatedTable != null) localVarFormParams.Add("related_table", Configuration.ApiClient.ParameterToString(relatedTable)); // form parameter
            if (junctionTable != null) localVarFormParams.Add("junction_table", Configuration.ApiClient.ParameterToString(junctionTable)); // form parameter
            if (junctionKeyLeft != null) localVarFormParams.Add("junction_key_left", Configuration.ApiClient.ParameterToString(junctionKeyLeft)); // form parameter
            if (junctionKeyRight != null) localVarFormParams.Add("junction_key_right", Configuration.ApiClient.ParameterToString(junctionKeyRight)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddColumnAsync (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
             await AddColumnAsyncWithHttpInfo(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);

        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="columnName">The unique name of the column to create (optional)</param>
        /// <param name="type">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddColumnAsyncWithHttpInfo (string tableId, string tableName = null, string columnName = null, string type = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->AddColumn");

            var localVarPath = "/tables/{tableId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (columnName != null) localVarFormParams.Add("column_name", Configuration.ApiClient.ParameterToString(columnName)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (ui != null) localVarFormParams.Add("ui", Configuration.ApiClient.ParameterToString(ui)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("hidden_input", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (hiddenList != null) localVarFormParams.Add("hidden_list", Configuration.ApiClient.ParameterToString(hiddenList)); // form parameter
            if (required != null) localVarFormParams.Add("required", Configuration.ApiClient.ParameterToString(required)); // form parameter
            if (sort != null) localVarFormParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (relationshipType != null) localVarFormParams.Add("relationship_type", Configuration.ApiClient.ParameterToString(relationshipType)); // form parameter
            if (relatedTable != null) localVarFormParams.Add("related_table", Configuration.ApiClient.ParameterToString(relatedTable)); // form parameter
            if (junctionTable != null) localVarFormParams.Add("junction_table", Configuration.ApiClient.ParameterToString(junctionTable)); // form parameter
            if (junctionKeyLeft != null) localVarFormParams.Add("junction_key_left", Configuration.ApiClient.ParameterToString(junctionKeyLeft)); // form parameter
            if (junctionKeyRight != null) localVarFormParams.Add("junction_key_right", Configuration.ApiClient.ParameterToString(junctionKeyRight)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns></returns>
        public void AddRow (string tableId, string customData)
        {
             AddRowWithHttpInfo(tableId, customData);
        }

        /// <summary>
        /// Add a new row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddRowWithHttpInfo (string tableId, string customData)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->AddRow");
            // verify the required parameter 'customData' is set
            if (customData == null)
                throw new ApiException(400, "Missing required parameter 'customData' when calling TablesApi->AddRow");

            var localVarPath = "/tables/{tableId}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (customData != null && customData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddRowAsync (string tableId, string customData)
        {
             await AddRowAsyncWithHttpInfo(tableId, customData);

        }

        /// <summary>
        /// Add a new row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddRowAsyncWithHttpInfo (string tableId, string customData)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->AddRow");
            // verify the required parameter 'customData' is set
            if (customData == null)
                throw new ApiException(400, "Missing required parameter 'customData' when calling TablesApi->AddRow");

            var localVarPath = "/tables/{tableId}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (customData != null && customData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns></returns>
        public void AddTable (string name = null)
        {
             AddTableWithHttpInfo(name);
        }

        /// <summary>
        /// Add a new table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddTableWithHttpInfo (string name = null)
        {

            var localVarPath = "/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddTableAsync (string name = null)
        {
             await AddTableAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Add a new table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of table to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddTableAsyncWithHttpInfo (string name = null)
        {

            var localVarPath = "/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns></returns>
        public void DeleteColumn (string tableId, string columnName)
        {
             DeleteColumnWithHttpInfo(tableId, columnName);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteColumnWithHttpInfo (string tableId, string columnName)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->DeleteColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteColumnAsync (string tableId, string columnName)
        {
             await DeleteColumnAsyncWithHttpInfo(tableId, columnName);

        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteColumnAsyncWithHttpInfo (string tableId, string columnName)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->DeleteColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns></returns>
        public void DeleteRow (string tableId, int? rowId)
        {
             DeleteRowWithHttpInfo(tableId, rowId);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRowWithHttpInfo (string tableId, int? rowId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->DeleteRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRowAsync (string tableId, int? rowId)
        {
             await DeleteRowAsyncWithHttpInfo(tableId, rowId);

        }

        /// <summary>
        /// Delete row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRowAsyncWithHttpInfo (string tableId, int? rowId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->DeleteRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns></returns>
        public void DeleteTable (string tableId)
        {
             DeleteTableWithHttpInfo(tableId);
        }

        /// <summary>
        /// Delete Table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTableWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteTable");

            var localVarPath = "/tables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTableAsync (string tableId)
        {
             await DeleteTableAsyncWithHttpInfo(tableId);

        }

        /// <summary>
        /// Delete Table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTableAsyncWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->DeleteTable");

            var localVarPath = "/tables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns specific table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTable</returns>
        public GetTable GetTable (string tableId)
        {
             ApiResponse<GetTable> localVarResponse = GetTableWithHttpInfo(tableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTable</returns>
        public ApiResponse< GetTable > GetTableWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTable");

            var localVarPath = "/tables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTable)));
        }

        /// <summary>
        /// Returns specific table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTable</returns>
        public async System.Threading.Tasks.Task<GetTable> GetTableAsync (string tableId)
        {
             ApiResponse<GetTable> localVarResponse = await GetTableAsyncWithHttpInfo(tableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTable>> GetTableAsyncWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTable");

            var localVarPath = "/tables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTable)));
        }

        /// <summary>
        /// Returns specific table column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>GetTableColumn</returns>
        public GetTableColumn GetTableColumn (string tableId, string columnName)
        {
             ApiResponse<GetTableColumn> localVarResponse = GetTableColumnWithHttpInfo(tableId, columnName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific table column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>ApiResponse of GetTableColumn</returns>
        public ApiResponse< GetTableColumn > GetTableColumnWithHttpInfo (string tableId, string columnName)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->GetTableColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableColumn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableColumn)));
        }

        /// <summary>
        /// Returns specific table column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of GetTableColumn</returns>
        public async System.Threading.Tasks.Task<GetTableColumn> GetTableColumnAsync (string tableId, string columnName)
        {
             ApiResponse<GetTableColumn> localVarResponse = await GetTableColumnAsyncWithHttpInfo(tableId, columnName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific table column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <returns>Task of ApiResponse (GetTableColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTableColumn>> GetTableColumnAsyncWithHttpInfo (string tableId, string columnName)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->GetTableColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableColumn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableColumn)));
        }

        /// <summary>
        /// Returns table columns 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTableColumns</returns>
        public GetTableColumns GetTableColumns (string tableId)
        {
             ApiResponse<GetTableColumns> localVarResponse = GetTableColumnsWithHttpInfo(tableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns table columns 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTableColumns</returns>
        public ApiResponse< GetTableColumns > GetTableColumnsWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableColumns");

            var localVarPath = "/tables/{tableId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableColumns)));
        }

        /// <summary>
        /// Returns table columns 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTableColumns</returns>
        public async System.Threading.Tasks.Task<GetTableColumns> GetTableColumnsAsync (string tableId)
        {
             ApiResponse<GetTableColumns> localVarResponse = await GetTableColumnsAsyncWithHttpInfo(tableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns table columns 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTableColumns)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTableColumns>> GetTableColumnsAsyncWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableColumns");

            var localVarPath = "/tables/{tableId}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableColumns)));
        }

        /// <summary>
        /// Returns specific table row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>GetTableRow</returns>
        public GetTableRow GetTableRow (string tableId, int? rowId)
        {
             ApiResponse<GetTableRow> localVarResponse = GetTableRowWithHttpInfo(tableId, rowId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific table row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>ApiResponse of GetTableRow</returns>
        public ApiResponse< GetTableRow > GetTableRowWithHttpInfo (string tableId, int? rowId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->GetTableRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableRow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableRow)));
        }

        /// <summary>
        /// Returns specific table row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of GetTableRow</returns>
        public async System.Threading.Tasks.Task<GetTableRow> GetTableRowAsync (string tableId, int? rowId)
        {
             ApiResponse<GetTableRow> localVarResponse = await GetTableRowAsyncWithHttpInfo(tableId, rowId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific table row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <returns>Task of ApiResponse (GetTableRow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTableRow>> GetTableRowAsyncWithHttpInfo (string tableId, int? rowId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->GetTableRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableRow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableRow)));
        }

        /// <summary>
        /// Returns table rows 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>GetTableRows</returns>
        public GetTableRows GetTableRows (string tableId)
        {
             ApiResponse<GetTableRows> localVarResponse = GetTableRowsWithHttpInfo(tableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns table rows 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetTableRows</returns>
        public ApiResponse< GetTableRows > GetTableRowsWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableRows");

            var localVarPath = "/tables/{tableId}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableRows>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableRows) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableRows)));
        }

        /// <summary>
        /// Returns table rows 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of GetTableRows</returns>
        public async System.Threading.Tasks.Task<GetTableRows> GetTableRowsAsync (string tableId)
        {
             ApiResponse<GetTableRows> localVarResponse = await GetTableRowsAsyncWithHttpInfo(tableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns table rows 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetTableRows)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTableRows>> GetTableRowsAsyncWithHttpInfo (string tableId)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->GetTableRows");

            var localVarPath = "/tables/{tableId}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTableRows>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTableRows) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTableRows)));
        }

        /// <summary>
        /// Returns tables 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetTables</returns>
        public GetTables GetTables ()
        {
             ApiResponse<GetTables> localVarResponse = GetTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns tables 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetTables</returns>
        public ApiResponse< GetTables > GetTablesWithHttpInfo ()
        {

            var localVarPath = "/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTables>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTables) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTables)));
        }

        /// <summary>
        /// Returns tables 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetTables</returns>
        public async System.Threading.Tasks.Task<GetTables> GetTablesAsync ()
        {
             ApiResponse<GetTables> localVarResponse = await GetTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns tables 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetTables)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTables>> GetTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTables>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTables) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTables)));
        }

        /// <summary>
        /// Update column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns></returns>
        public void UpdateColumn (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
             UpdateColumnWithHttpInfo(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
        }

        /// <summary>
        /// Update column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateColumnWithHttpInfo (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->UpdateColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->UpdateColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter
            if (dataType != null) localVarFormParams.Add("data_type", Configuration.ApiClient.ParameterToString(dataType)); // form parameter
            if (ui != null) localVarFormParams.Add("ui", Configuration.ApiClient.ParameterToString(ui)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("hidden_input", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (hiddenList != null) localVarFormParams.Add("hidden_list", Configuration.ApiClient.ParameterToString(hiddenList)); // form parameter
            if (required != null) localVarFormParams.Add("required", Configuration.ApiClient.ParameterToString(required)); // form parameter
            if (sort != null) localVarFormParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (relationshipType != null) localVarFormParams.Add("relationship_type", Configuration.ApiClient.ParameterToString(relationshipType)); // form parameter
            if (relatedTable != null) localVarFormParams.Add("related_table", Configuration.ApiClient.ParameterToString(relatedTable)); // form parameter
            if (junctionTable != null) localVarFormParams.Add("junction_table", Configuration.ApiClient.ParameterToString(junctionTable)); // form parameter
            if (junctionKeyLeft != null) localVarFormParams.Add("junction_key_left", Configuration.ApiClient.ParameterToString(junctionKeyLeft)); // form parameter
            if (junctionKeyRight != null) localVarFormParams.Add("junction_key_right", Configuration.ApiClient.ParameterToString(junctionKeyRight)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateColumnAsync (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
             await UpdateColumnAsyncWithHttpInfo(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);

        }

        /// <summary>
        /// Update column 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="columnName">Name of column to return</param>
        /// <param name="dataType">The datatype of the column, eg: INT (optional)</param>
        /// <param name="ui">The Directus Interface to use for this column (optional)</param>
        /// <param name="hiddenInput">Whether the column will be hidden (globally) on the Edit Item page (optional)</param>
        /// <param name="hiddenList">Whether the column will be hidden (globally) on the Item Listing page (optional)</param>
        /// <param name="required">Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)</param>
        /// <param name="sort">The sort order of the column used to override the column order in the schema (optional)</param>
        /// <param name="comment">A helpful note to users for this column (optional)</param>
        /// <param name="relationshipType">The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)</param>
        /// <param name="relatedTable">The table name this column is related to (only used when storing relational data) (optional)</param>
        /// <param name="junctionTable">The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyLeft">The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)</param>
        /// <param name="junctionKeyRight">The column name in junction that is related to the related table (only used when storing relational data) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateColumnAsyncWithHttpInfo (string tableId, string columnName, string dataType = null, string ui = null, bool? hiddenInput = null, bool? hiddenList = null, bool? required = null, int? sort = null, string comment = null, string relationshipType = null, string relatedTable = null, string junctionTable = null, string junctionKeyLeft = null, string junctionKeyRight = null)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->UpdateColumn");
            // verify the required parameter 'columnName' is set
            if (columnName == null)
                throw new ApiException(400, "Missing required parameter 'columnName' when calling TablesApi->UpdateColumn");

            var localVarPath = "/tables/{tableId}/columns/{columnName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (columnName != null) localVarPathParams.Add("columnName", Configuration.ApiClient.ParameterToString(columnName)); // path parameter
            if (dataType != null) localVarFormParams.Add("data_type", Configuration.ApiClient.ParameterToString(dataType)); // form parameter
            if (ui != null) localVarFormParams.Add("ui", Configuration.ApiClient.ParameterToString(ui)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("hidden_input", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (hiddenList != null) localVarFormParams.Add("hidden_list", Configuration.ApiClient.ParameterToString(hiddenList)); // form parameter
            if (required != null) localVarFormParams.Add("required", Configuration.ApiClient.ParameterToString(required)); // form parameter
            if (sort != null) localVarFormParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // form parameter
            if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
            if (relationshipType != null) localVarFormParams.Add("relationship_type", Configuration.ApiClient.ParameterToString(relationshipType)); // form parameter
            if (relatedTable != null) localVarFormParams.Add("related_table", Configuration.ApiClient.ParameterToString(relatedTable)); // form parameter
            if (junctionTable != null) localVarFormParams.Add("junction_table", Configuration.ApiClient.ParameterToString(junctionTable)); // form parameter
            if (junctionKeyLeft != null) localVarFormParams.Add("junction_key_left", Configuration.ApiClient.ParameterToString(junctionKeyLeft)); // form parameter
            if (junctionKeyRight != null) localVarFormParams.Add("junction_key_right", Configuration.ApiClient.ParameterToString(junctionKeyRight)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns></returns>
        public void UpdateRow (string tableId, int? rowId, string customData)
        {
             UpdateRowWithHttpInfo(tableId, rowId, customData);
        }

        /// <summary>
        /// Update row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRowWithHttpInfo (string tableId, int? rowId, string customData)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->UpdateRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->UpdateRow");
            // verify the required parameter 'customData' is set
            if (customData == null)
                throw new ApiException(400, "Missing required parameter 'customData' when calling TablesApi->UpdateRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter
            if (customData != null && customData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRowAsync (string tableId, int? rowId, string customData)
        {
             await UpdateRowAsyncWithHttpInfo(tableId, rowId, customData);

        }

        /// <summary>
        /// Update row 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">ID of table to return rows from</param>
        /// <param name="rowId">ID of row to return from rows</param>
        /// <param name="customData">Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRowAsyncWithHttpInfo (string tableId, int? rowId, string customData)
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling TablesApi->UpdateRow");
            // verify the required parameter 'rowId' is set
            if (rowId == null)
                throw new ApiException(400, "Missing required parameter 'rowId' when calling TablesApi->UpdateRow");
            // verify the required parameter 'customData' is set
            if (customData == null)
                throw new ApiException(400, "Missing required parameter 'customData' when calling TablesApi->UpdateRow");

            var localVarPath = "/tables/{tableId}/rows/{rowId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableId != null) localVarPathParams.Add("tableId", Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (rowId != null) localVarPathParams.Add("rowId", Configuration.ApiClient.ParameterToString(rowId)); // path parameter
            if (customData != null && customData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
