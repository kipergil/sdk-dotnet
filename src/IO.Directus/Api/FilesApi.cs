/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Directus.Client;
using IO.Directus.Model;

namespace IO.Directus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns></returns>
        void CreateFile (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null);

        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateFileWithHttpInfo (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null);
        /// <summary>
        /// Returns specific file by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>GetFile</returns>
        GetFile GetFile (int? fileId);

        /// <summary>
        /// Returns specific file by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>ApiResponse of GetFile</returns>
        ApiResponse<GetFile> GetFileWithHttpInfo (int? fileId);
        /// <summary>
        /// Returns files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetFiles</returns>
        GetFiles GetFiles ();

        /// <summary>
        /// Returns files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetFiles</returns>
        ApiResponse<GetFiles> GetFilesWithHttpInfo ();
        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns></returns>
        void UpdateFile (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null);

        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFileWithHttpInfo (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateFileAsync (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null);

        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateFileAsyncWithHttpInfo (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null);
        /// <summary>
        /// Returns specific file by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>Task of GetFile</returns>
        System.Threading.Tasks.Task<GetFile> GetFileAsync (int? fileId);

        /// <summary>
        /// Returns specific file by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>Task of ApiResponse (GetFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFile>> GetFileAsyncWithHttpInfo (int? fileId);
        /// <summary>
        /// Returns files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetFiles</returns>
        System.Threading.Tasks.Task<GetFiles> GetFilesAsync ();

        /// <summary>
        /// Returns files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetFiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFiles>> GetFilesAsyncWithHttpInfo ();
        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFileAsync (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null);

        /// <summary>
        /// Creates file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFileAsyncWithHttpInfo (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private IO.Directus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Directus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns></returns>
        public void CreateFile (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null)
        {
             CreateFileWithHttpInfo(data, active, name, title, location, type, tags, caption);
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateFileWithHttpInfo (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null)
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (caption != null) localVarFormParams.Add("caption", Configuration.ApiClient.ParameterToString(caption)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateFileAsync (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null)
        {
             await CreateFileAsyncWithHttpInfo(data, active, name, title, location, type, tags, caption);

        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateFileAsyncWithHttpInfo (string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null)
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (caption != null) localVarFormParams.Add("caption", Configuration.ApiClient.ParameterToString(caption)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns specific file by id 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>GetFile</returns>
        public GetFile GetFile (int? fileId)
        {
             ApiResponse<GetFile> localVarResponse = GetFileWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific file by id 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>ApiResponse of GetFile</returns>
        public ApiResponse< GetFile > GetFileWithHttpInfo (int? fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFile");

            var localVarPath = "/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFile)));
        }

        /// <summary>
        /// Returns specific file by id 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>Task of GetFile</returns>
        public async System.Threading.Tasks.Task<GetFile> GetFileAsync (int? fileId)
        {
             ApiResponse<GetFile> localVarResponse = await GetFileAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific file by id 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <returns>Task of ApiResponse (GetFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFile>> GetFileAsyncWithHttpInfo (int? fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFile");

            var localVarPath = "/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFile)));
        }

        /// <summary>
        /// Returns files 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetFiles</returns>
        public GetFiles GetFiles ()
        {
             ApiResponse<GetFiles> localVarResponse = GetFilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns files 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetFiles</returns>
        public ApiResponse< GetFiles > GetFilesWithHttpInfo ()
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFiles)));
        }

        /// <summary>
        /// Returns files 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetFiles</returns>
        public async System.Threading.Tasks.Task<GetFiles> GetFilesAsync ()
        {
             ApiResponse<GetFiles> localVarResponse = await GetFilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns files 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetFiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFiles>> GetFilesAsyncWithHttpInfo ()
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFiles)));
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns></returns>
        public void UpdateFile (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null)
        {
             UpdateFileWithHttpInfo(fileId, data, active, name, title, location, type, tags, caption, url, width, height, size, embedId, user, dateUploaded, storageAdapter);
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFileWithHttpInfo (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->UpdateFile");

            var localVarPath = "/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (caption != null) localVarFormParams.Add("caption", Configuration.ApiClient.ParameterToString(caption)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (width != null) localVarFormParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (height != null) localVarFormParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (size != null) localVarFormParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (embedId != null) localVarFormParams.Add("embed_id", Configuration.ApiClient.ParameterToString(embedId)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (dateUploaded != null) localVarFormParams.Add("date_uploaded", Configuration.ApiClient.ParameterToString(dateUploaded)); // form parameter
            if (storageAdapter != null) localVarFormParams.Add("storage_adapter", Configuration.ApiClient.ParameterToString(storageAdapter)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFileAsync (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null)
        {
             await UpdateFileAsyncWithHttpInfo(fileId, data, active, name, title, location, type, tags, caption, url, width, height, size, embedId, user, dateUploaded, storageAdapter);

        }

        /// <summary>
        /// Creates file 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ID of file to get</param>
        /// <param name="data">The file&#39;s Base64 content (optional)</param>
        /// <param name="active">The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)</param>
        /// <param name="name">The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)</param>
        /// <param name="title">The file&#39;s title (optional)</param>
        /// <param name="location">Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)</param>
        /// <param name="type">The file&#39;s mime type (optional)</param>
        /// <param name="tags">A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)</param>
        /// <param name="caption">The file&#39;s caption or description. Pulled from the IPTC description when available (optional)</param>
        /// <param name="url">File url relativity to Directus base url (optional)</param>
        /// <param name="width">File width (optional)</param>
        /// <param name="height">File height (optional)</param>
        /// <param name="size">File size in bytes (optional)</param>
        /// <param name="embedId">ID of the embedded file. Ex Youtube ID (optional)</param>
        /// <param name="user">File owner (who uploaded the file) (optional)</param>
        /// <param name="dateUploaded">File uploaded date. TODO It should be an DateTime object (optional)</param>
        /// <param name="storageAdapter">Storage adapter used to upload the file (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFileAsyncWithHttpInfo (int? fileId, string data = null, int? active = null, string name = null, string title = null, string location = null, string type = null, string tags = null, string caption = null, string url = null, int? width = null, int? height = null, int? size = null, string embedId = null, int? user = null, string dateUploaded = null, string storageAdapter = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->UpdateFile");

            var localVarPath = "/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (location != null) localVarFormParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (caption != null) localVarFormParams.Add("caption", Configuration.ApiClient.ParameterToString(caption)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (width != null) localVarFormParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (height != null) localVarFormParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (size != null) localVarFormParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (embedId != null) localVarFormParams.Add("embed_id", Configuration.ApiClient.ParameterToString(embedId)); // form parameter
            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (dateUploaded != null) localVarFormParams.Add("date_uploaded", Configuration.ApiClient.ParameterToString(dateUploaded)); // form parameter
            if (storageAdapter != null) localVarFormParams.Add("storage_adapter", Configuration.ApiClient.ParameterToString(storageAdapter)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
