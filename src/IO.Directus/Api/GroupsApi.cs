/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Directus.Client;
using IO.Directus.Model;

namespace IO.Directus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns></returns>
        void AddGroup (string name = null);

        /// <summary>
        /// Add a new group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGroupWithHttpInfo (string name = null);
        /// <summary>
        /// Create new table privileges for the specified user group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns></returns>
        void AddPrivilege (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);

        /// <summary>
        /// Create new table privileges for the specified user group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPrivilegeWithHttpInfo (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);
        /// <summary>
        /// Returns specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>GetGroup</returns>
        GetGroup GetGroup (string groupId);

        /// <summary>
        /// Returns specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>ApiResponse of GetGroup</returns>
        ApiResponse<GetGroup> GetGroupWithHttpInfo (string groupId);
        /// <summary>
        /// Returns groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetGroups</returns>
        GetGroups GetGroups ();

        /// <summary>
        /// Returns groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetGroups</returns>
        ApiResponse<GetGroups> GetGroupsWithHttpInfo ();
        /// <summary>
        /// Returns group privileges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>GetPrivileges</returns>
        GetPrivileges GetPrivileges (string groupId);

        /// <summary>
        /// Returns group privileges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>ApiResponse of GetPrivileges</returns>
        ApiResponse<GetPrivileges> GetPrivilegesWithHttpInfo (string groupId);
        /// <summary>
        /// Returns group privileges by tableName
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>GetPrivilegesForTable</returns>
        GetPrivilegesForTable GetPrivilegesForTable (string groupId, string tableNameOrPrivilegeId);

        /// <summary>
        /// Returns group privileges by tableName
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>ApiResponse of GetPrivilegesForTable</returns>
        ApiResponse<GetPrivilegesForTable> GetPrivilegesForTableWithHttpInfo (string groupId, string tableNameOrPrivilegeId);
        /// <summary>
        /// Update privileges by privilegeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns></returns>
        void UpdatePrivileges (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);

        /// <summary>
        /// Update privileges by privilegeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePrivilegesWithHttpInfo (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddGroupAsync (string name = null);

        /// <summary>
        /// Add a new group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddGroupAsyncWithHttpInfo (string name = null);
        /// <summary>
        /// Create new table privileges for the specified user group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPrivilegeAsync (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);

        /// <summary>
        /// Create new table privileges for the specified user group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPrivilegeAsyncWithHttpInfo (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);
        /// <summary>
        /// Returns specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of GetGroup</returns>
        System.Threading.Tasks.Task<GetGroup> GetGroupAsync (string groupId);

        /// <summary>
        /// Returns specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of ApiResponse (GetGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroup>> GetGroupAsyncWithHttpInfo (string groupId);
        /// <summary>
        /// Returns groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetGroups</returns>
        System.Threading.Tasks.Task<GetGroups> GetGroupsAsync ();

        /// <summary>
        /// Returns groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroups>> GetGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns group privileges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of GetPrivileges</returns>
        System.Threading.Tasks.Task<GetPrivileges> GetPrivilegesAsync (string groupId);

        /// <summary>
        /// Returns group privileges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of ApiResponse (GetPrivileges)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrivileges>> GetPrivilegesAsyncWithHttpInfo (string groupId);
        /// <summary>
        /// Returns group privileges by tableName
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>Task of GetPrivilegesForTable</returns>
        System.Threading.Tasks.Task<GetPrivilegesForTable> GetPrivilegesForTableAsync (string groupId, string tableNameOrPrivilegeId);

        /// <summary>
        /// Returns group privileges by tableName
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>Task of ApiResponse (GetPrivilegesForTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrivilegesForTable>> GetPrivilegesForTableAsyncWithHttpInfo (string groupId, string tableNameOrPrivilegeId);
        /// <summary>
        /// Update privileges by privilegeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePrivilegesAsync (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);

        /// <summary>
        /// Update privileges by privilegeId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePrivilegesAsyncWithHttpInfo (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private IO.Directus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Directus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a new group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns></returns>
        public void AddGroup (string name = null)
        {
             AddGroupWithHttpInfo(name);
        }

        /// <summary>
        /// Add a new group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddGroupWithHttpInfo (string name = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddGroupAsync (string name = null)
        {
             await AddGroupAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Add a new group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of group to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGroupAsyncWithHttpInfo (string name = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create new table privileges for the specified user group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns></returns>
        public void AddPrivilege (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
             AddPrivilegeWithHttpInfo(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
        }

        /// <summary>
        /// Create new table privileges for the specified user group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPrivilegeWithHttpInfo (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddPrivilege");

            var localVarPath = "/privileges/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (allowAdd != null) localVarFormParams.Add("allow_add", Configuration.ApiClient.ParameterToString(allowAdd)); // form parameter
            if (allowEdit != null) localVarFormParams.Add("allow_edit", Configuration.ApiClient.ParameterToString(allowEdit)); // form parameter
            if (allowDelete != null) localVarFormParams.Add("allow_delete", Configuration.ApiClient.ParameterToString(allowDelete)); // form parameter
            if (allowView != null) localVarFormParams.Add("allow_view", Configuration.ApiClient.ParameterToString(allowView)); // form parameter
            if (allowAlter != null) localVarFormParams.Add("allow_alter", Configuration.ApiClient.ParameterToString(allowAlter)); // form parameter
            if (navListed != null) localVarFormParams.Add("nav_listed", Configuration.ApiClient.ParameterToString(navListed)); // form parameter
            if (readFieldBlacklist != null) localVarFormParams.Add("read_field_blacklist", Configuration.ApiClient.ParameterToString(readFieldBlacklist)); // form parameter
            if (writeFieldBlacklist != null) localVarFormParams.Add("write_field_blacklist", Configuration.ApiClient.ParameterToString(writeFieldBlacklist)); // form parameter
            if (statusId != null) localVarFormParams.Add("status_id", Configuration.ApiClient.ParameterToString(statusId)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPrivilege", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create new table privileges for the specified user group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPrivilegeAsync (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
             await AddPrivilegeAsyncWithHttpInfo(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);

        }

        /// <summary>
        /// Create new table privileges for the specified user group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="id">Privilege&#39;s Unique Identification number (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPrivilegeAsyncWithHttpInfo (string groupId, int? id = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->AddPrivilege");

            var localVarPath = "/privileges/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (allowAdd != null) localVarFormParams.Add("allow_add", Configuration.ApiClient.ParameterToString(allowAdd)); // form parameter
            if (allowEdit != null) localVarFormParams.Add("allow_edit", Configuration.ApiClient.ParameterToString(allowEdit)); // form parameter
            if (allowDelete != null) localVarFormParams.Add("allow_delete", Configuration.ApiClient.ParameterToString(allowDelete)); // form parameter
            if (allowView != null) localVarFormParams.Add("allow_view", Configuration.ApiClient.ParameterToString(allowView)); // form parameter
            if (allowAlter != null) localVarFormParams.Add("allow_alter", Configuration.ApiClient.ParameterToString(allowAlter)); // form parameter
            if (navListed != null) localVarFormParams.Add("nav_listed", Configuration.ApiClient.ParameterToString(navListed)); // form parameter
            if (readFieldBlacklist != null) localVarFormParams.Add("read_field_blacklist", Configuration.ApiClient.ParameterToString(readFieldBlacklist)); // form parameter
            if (writeFieldBlacklist != null) localVarFormParams.Add("write_field_blacklist", Configuration.ApiClient.ParameterToString(writeFieldBlacklist)); // form parameter
            if (statusId != null) localVarFormParams.Add("status_id", Configuration.ApiClient.ParameterToString(statusId)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPrivilege", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns specific group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>GetGroup</returns>
        public GetGroup GetGroup (string groupId)
        {
             ApiResponse<GetGroup> localVarResponse = GetGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>ApiResponse of GetGroup</returns>
        public ApiResponse< GetGroup > GetGroupWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroup");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroup)));
        }

        /// <summary>
        /// Returns specific group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of GetGroup</returns>
        public async System.Threading.Tasks.Task<GetGroup> GetGroupAsync (string groupId)
        {
             ApiResponse<GetGroup> localVarResponse = await GetGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific group 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of ApiResponse (GetGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGroup>> GetGroupAsyncWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetGroup");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroup)));
        }

        /// <summary>
        /// Returns groups 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetGroups</returns>
        public GetGroups GetGroups ()
        {
             ApiResponse<GetGroups> localVarResponse = GetGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns groups 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetGroups</returns>
        public ApiResponse< GetGroups > GetGroupsWithHttpInfo ()
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroups)));
        }

        /// <summary>
        /// Returns groups 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetGroups</returns>
        public async System.Threading.Tasks.Task<GetGroups> GetGroupsAsync ()
        {
             ApiResponse<GetGroups> localVarResponse = await GetGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns groups 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetGroups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGroups>> GetGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGroups)));
        }

        /// <summary>
        /// Returns group privileges 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>GetPrivileges</returns>
        public GetPrivileges GetPrivileges (string groupId)
        {
             ApiResponse<GetPrivileges> localVarResponse = GetPrivilegesWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns group privileges 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>ApiResponse of GetPrivileges</returns>
        public ApiResponse< GetPrivileges > GetPrivilegesWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetPrivileges");

            var localVarPath = "/privileges/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrivileges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrivileges) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrivileges)));
        }

        /// <summary>
        /// Returns group privileges 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of GetPrivileges</returns>
        public async System.Threading.Tasks.Task<GetPrivileges> GetPrivilegesAsync (string groupId)
        {
             ApiResponse<GetPrivileges> localVarResponse = await GetPrivilegesAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns group privileges 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <returns>Task of ApiResponse (GetPrivileges)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrivileges>> GetPrivilegesAsyncWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetPrivileges");

            var localVarPath = "/privileges/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrivileges>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrivileges) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrivileges)));
        }

        /// <summary>
        /// Returns group privileges by tableName 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>GetPrivilegesForTable</returns>
        public GetPrivilegesForTable GetPrivilegesForTable (string groupId, string tableNameOrPrivilegeId)
        {
             ApiResponse<GetPrivilegesForTable> localVarResponse = GetPrivilegesForTableWithHttpInfo(groupId, tableNameOrPrivilegeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns group privileges by tableName 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>ApiResponse of GetPrivilegesForTable</returns>
        public ApiResponse< GetPrivilegesForTable > GetPrivilegesForTableWithHttpInfo (string groupId, string tableNameOrPrivilegeId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetPrivilegesForTable");
            // verify the required parameter 'tableNameOrPrivilegeId' is set
            if (tableNameOrPrivilegeId == null)
                throw new ApiException(400, "Missing required parameter 'tableNameOrPrivilegeId' when calling GroupsApi->GetPrivilegesForTable");

            var localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (tableNameOrPrivilegeId != null) localVarPathParams.Add("tableNameOrPrivilegeId", Configuration.ApiClient.ParameterToString(tableNameOrPrivilegeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivilegesForTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrivilegesForTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrivilegesForTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrivilegesForTable)));
        }

        /// <summary>
        /// Returns group privileges by tableName 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>Task of GetPrivilegesForTable</returns>
        public async System.Threading.Tasks.Task<GetPrivilegesForTable> GetPrivilegesForTableAsync (string groupId, string tableNameOrPrivilegeId)
        {
             ApiResponse<GetPrivilegesForTable> localVarResponse = await GetPrivilegesForTableAsyncWithHttpInfo(groupId, tableNameOrPrivilegeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns group privileges by tableName 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <returns>Task of ApiResponse (GetPrivilegesForTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrivilegesForTable>> GetPrivilegesForTableAsyncWithHttpInfo (string groupId, string tableNameOrPrivilegeId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->GetPrivilegesForTable");
            // verify the required parameter 'tableNameOrPrivilegeId' is set
            if (tableNameOrPrivilegeId == null)
                throw new ApiException(400, "Missing required parameter 'tableNameOrPrivilegeId' when calling GroupsApi->GetPrivilegesForTable");

            var localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (tableNameOrPrivilegeId != null) localVarPathParams.Add("tableNameOrPrivilegeId", Configuration.ApiClient.ParameterToString(tableNameOrPrivilegeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivilegesForTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrivilegesForTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPrivilegesForTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrivilegesForTable)));
        }

        /// <summary>
        /// Update privileges by privilegeId 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns></returns>
        public void UpdatePrivileges (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
             UpdatePrivilegesWithHttpInfo(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
        }

        /// <summary>
        /// Update privileges by privilegeId 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePrivilegesWithHttpInfo (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdatePrivileges");
            // verify the required parameter 'tableNameOrPrivilegeId' is set
            if (tableNameOrPrivilegeId == null)
                throw new ApiException(400, "Missing required parameter 'tableNameOrPrivilegeId' when calling GroupsApi->UpdatePrivileges");

            var localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (tableNameOrPrivilegeId != null) localVarPathParams.Add("tableNameOrPrivilegeId", Configuration.ApiClient.ParameterToString(tableNameOrPrivilegeId)); // path parameter
            if (privilegesId != null) localVarFormParams.Add("privileges_id", Configuration.ApiClient.ParameterToString(privilegesId)); // form parameter
            if (groupId2 != null) localVarFormParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId2)); // form parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (allowAdd != null) localVarFormParams.Add("allow_add", Configuration.ApiClient.ParameterToString(allowAdd)); // form parameter
            if (allowEdit != null) localVarFormParams.Add("allow_edit", Configuration.ApiClient.ParameterToString(allowEdit)); // form parameter
            if (allowDelete != null) localVarFormParams.Add("allow_delete", Configuration.ApiClient.ParameterToString(allowDelete)); // form parameter
            if (allowView != null) localVarFormParams.Add("allow_view", Configuration.ApiClient.ParameterToString(allowView)); // form parameter
            if (allowAlter != null) localVarFormParams.Add("allow_alter", Configuration.ApiClient.ParameterToString(allowAlter)); // form parameter
            if (navListed != null) localVarFormParams.Add("nav_listed", Configuration.ApiClient.ParameterToString(navListed)); // form parameter
            if (readFieldBlacklist != null) localVarFormParams.Add("read_field_blacklist", Configuration.ApiClient.ParameterToString(readFieldBlacklist)); // form parameter
            if (writeFieldBlacklist != null) localVarFormParams.Add("write_field_blacklist", Configuration.ApiClient.ParameterToString(writeFieldBlacklist)); // form parameter
            if (statusId != null) localVarFormParams.Add("status_id", Configuration.ApiClient.ParameterToString(statusId)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update privileges by privilegeId 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePrivilegesAsync (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
             await UpdatePrivilegesAsyncWithHttpInfo(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);

        }

        /// <summary>
        /// Update privileges by privilegeId 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of group to return</param>
        /// <param name="tableNameOrPrivilegeId">ID of privileges or Table Name to use</param>
        /// <param name="privilegesId">ubique privilege ID (optional)</param>
        /// <param name="groupId2">ID of group to return (optional)</param>
        /// <param name="tableName">Name of table to add (optional)</param>
        /// <param name="allowAdd">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="allowEdit">Permission to edit/update entries in the table (See values below) (optional)</param>
        /// <param name="allowDelete">Permission to delete/remove entries in the table (See values below) (optional)</param>
        /// <param name="allowView">Permission to view/read entries in the table (See values below) (optional)</param>
        /// <param name="allowAlter">Permission to add/create entries in the table (See values below) (optional)</param>
        /// <param name="navListed">If the table should be visible in the sidebar for this user group (optional)</param>
        /// <param name="readFieldBlacklist">A CSV of column names that the group can&#39;t view (read) (optional)</param>
        /// <param name="writeFieldBlacklist">A CSV of column names that the group can&#39;t edit (update) (optional)</param>
        /// <param name="statusId">State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePrivilegesAsyncWithHttpInfo (string groupId, string tableNameOrPrivilegeId, string privilegesId = null, string groupId2 = null, string tableName = null, int? allowAdd = null, int? allowEdit = null, int? allowDelete = null, int? allowView = null, int? allowAlter = null, bool? navListed = null, string readFieldBlacklist = null, string writeFieldBlacklist = null, string statusId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupsApi->UpdatePrivileges");
            // verify the required parameter 'tableNameOrPrivilegeId' is set
            if (tableNameOrPrivilegeId == null)
                throw new ApiException(400, "Missing required parameter 'tableNameOrPrivilegeId' when calling GroupsApi->UpdatePrivileges");

            var localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (tableNameOrPrivilegeId != null) localVarPathParams.Add("tableNameOrPrivilegeId", Configuration.ApiClient.ParameterToString(tableNameOrPrivilegeId)); // path parameter
            if (privilegesId != null) localVarFormParams.Add("privileges_id", Configuration.ApiClient.ParameterToString(privilegesId)); // form parameter
            if (groupId2 != null) localVarFormParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId2)); // form parameter
            if (tableName != null) localVarFormParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // form parameter
            if (allowAdd != null) localVarFormParams.Add("allow_add", Configuration.ApiClient.ParameterToString(allowAdd)); // form parameter
            if (allowEdit != null) localVarFormParams.Add("allow_edit", Configuration.ApiClient.ParameterToString(allowEdit)); // form parameter
            if (allowDelete != null) localVarFormParams.Add("allow_delete", Configuration.ApiClient.ParameterToString(allowDelete)); // form parameter
            if (allowView != null) localVarFormParams.Add("allow_view", Configuration.ApiClient.ParameterToString(allowView)); // form parameter
            if (allowAlter != null) localVarFormParams.Add("allow_alter", Configuration.ApiClient.ParameterToString(allowAlter)); // form parameter
            if (navListed != null) localVarFormParams.Add("nav_listed", Configuration.ApiClient.ParameterToString(navListed)); // form parameter
            if (readFieldBlacklist != null) localVarFormParams.Add("read_field_blacklist", Configuration.ApiClient.ParameterToString(readFieldBlacklist)); // form parameter
            if (writeFieldBlacklist != null) localVarFormParams.Add("write_field_blacklist", Configuration.ApiClient.ParameterToString(writeFieldBlacklist)); // form parameter
            if (statusId != null) localVarFormParams.Add("status_id", Configuration.ApiClient.ParameterToString(statusId)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
