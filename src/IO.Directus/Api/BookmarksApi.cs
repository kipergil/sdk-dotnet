/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Directus.Client;
using IO.Directus.Model;

namespace IO.Directus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookmarksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns></returns>
        void AddBookmark (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null);

        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBookmarkWithHttpInfo (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null);
        /// <summary>
        /// Deletes specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns></returns>
        void DeleteBookmark (int? bookmarkId);

        /// <summary>
        /// Deletes specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBookmarkWithHttpInfo (int? bookmarkId);
        /// <summary>
        /// Returns specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>GetBookmark</returns>
        GetBookmark GetBookmark (int? bookmarkId);

        /// <summary>
        /// Returns specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetBookmark</returns>
        ApiResponse<GetBookmark> GetBookmarkWithHttpInfo (int? bookmarkId);
        /// <summary>
        /// Returns bookmarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBookmarks</returns>
        GetBookmarks GetBookmarks ();

        /// <summary>
        /// Returns bookmarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBookmarks</returns>
        ApiResponse<GetBookmarks> GetBookmarksWithHttpInfo ();
        /// <summary>
        /// Returns bookmarks of current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBookmarks</returns>
        GetBookmarks GetBookmarksSelf ();

        /// <summary>
        /// Returns bookmarks of current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBookmarks</returns>
        ApiResponse<GetBookmarks> GetBookmarksSelfWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBookmarkAsync (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null);

        /// <summary>
        /// Create a column in a given table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBookmarkAsyncWithHttpInfo (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null);
        /// <summary>
        /// Deletes specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBookmarkAsync (int? bookmarkId);

        /// <summary>
        /// Deletes specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBookmarkAsyncWithHttpInfo (int? bookmarkId);
        /// <summary>
        /// Returns specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of GetBookmark</returns>
        System.Threading.Tasks.Task<GetBookmark> GetBookmarkAsync (int? bookmarkId);

        /// <summary>
        /// Returns specific bookmark
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetBookmark)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBookmark>> GetBookmarkAsyncWithHttpInfo (int? bookmarkId);
        /// <summary>
        /// Returns bookmarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBookmarks</returns>
        System.Threading.Tasks.Task<GetBookmarks> GetBookmarksAsync ();

        /// <summary>
        /// Returns bookmarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBookmarks)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBookmarks>> GetBookmarksAsyncWithHttpInfo ();
        /// <summary>
        /// Returns bookmarks of current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBookmarks</returns>
        System.Threading.Tasks.Task<GetBookmarks> GetBookmarksSelfAsync ();

        /// <summary>
        /// Returns bookmarks of current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBookmarks)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBookmarks>> GetBookmarksSelfAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BookmarksApi : IBookmarksApi
    {
        private IO.Directus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookmarksApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BookmarksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Directus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Directus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns></returns>
        public void AddBookmark (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null)
        {
             AddBookmarkWithHttpInfo(user, title, url, iconClass, active, section);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBookmarkWithHttpInfo (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null)
        {

            var localVarPath = "/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (iconClass != null) localVarFormParams.Add("icon_class", Configuration.ApiClient.ParameterToString(iconClass)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (section != null) localVarFormParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBookmarkAsync (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null)
        {
             await AddBookmarkAsyncWithHttpInfo(user, title, url, iconClass, active, section);

        }

        /// <summary>
        /// Create a column in a given table 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">[Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection) (optional)</param>
        /// <param name="title">The text to display in the navigation menu (optional)</param>
        /// <param name="url">The path to navigate to when clicked, relative to the Directus root (optional)</param>
        /// <param name="iconClass">Deprecated (optional)</param>
        /// <param name="active">Deprecated (optional)</param>
        /// <param name="section">[\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBookmarkAsyncWithHttpInfo (string user = null, string title = null, string url = null, string iconClass = null, string active = null, string section = null)
        {

            var localVarPath = "/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarFormParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (title != null) localVarFormParams.Add("title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (iconClass != null) localVarFormParams.Add("icon_class", Configuration.ApiClient.ParameterToString(iconClass)); // form parameter
            if (active != null) localVarFormParams.Add("active", Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (section != null) localVarFormParams.Add("section", Configuration.ApiClient.ParameterToString(section)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns></returns>
        public void DeleteBookmark (int? bookmarkId)
        {
             DeleteBookmarkWithHttpInfo(bookmarkId);
        }

        /// <summary>
        /// Deletes specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBookmarkWithHttpInfo (int? bookmarkId)
        {
            // verify the required parameter 'bookmarkId' is set
            if (bookmarkId == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkId' when calling BookmarksApi->DeleteBookmark");

            var localVarPath = "/bookmarks/{bookmarkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmarkId != null) localVarPathParams.Add("bookmarkId", Configuration.ApiClient.ParameterToString(bookmarkId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBookmarkAsync (int? bookmarkId)
        {
             await DeleteBookmarkAsyncWithHttpInfo(bookmarkId);

        }

        /// <summary>
        /// Deletes specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBookmarkAsyncWithHttpInfo (int? bookmarkId)
        {
            // verify the required parameter 'bookmarkId' is set
            if (bookmarkId == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkId' when calling BookmarksApi->DeleteBookmark");

            var localVarPath = "/bookmarks/{bookmarkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmarkId != null) localVarPathParams.Add("bookmarkId", Configuration.ApiClient.ParameterToString(bookmarkId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>GetBookmark</returns>
        public GetBookmark GetBookmark (int? bookmarkId)
        {
             ApiResponse<GetBookmark> localVarResponse = GetBookmarkWithHttpInfo(bookmarkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>ApiResponse of GetBookmark</returns>
        public ApiResponse< GetBookmark > GetBookmarkWithHttpInfo (int? bookmarkId)
        {
            // verify the required parameter 'bookmarkId' is set
            if (bookmarkId == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkId' when calling BookmarksApi->GetBookmark");

            var localVarPath = "/bookmarks/{bookmarkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmarkId != null) localVarPathParams.Add("bookmarkId", Configuration.ApiClient.ParameterToString(bookmarkId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmark) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmark)));
        }

        /// <summary>
        /// Returns specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of GetBookmark</returns>
        public async System.Threading.Tasks.Task<GetBookmark> GetBookmarkAsync (int? bookmarkId)
        {
             ApiResponse<GetBookmark> localVarResponse = await GetBookmarkAsyncWithHttpInfo(bookmarkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns specific bookmark 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmarkId">ID of table to return rows from</param>
        /// <returns>Task of ApiResponse (GetBookmark)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBookmark>> GetBookmarkAsyncWithHttpInfo (int? bookmarkId)
        {
            // verify the required parameter 'bookmarkId' is set
            if (bookmarkId == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkId' when calling BookmarksApi->GetBookmark");

            var localVarPath = "/bookmarks/{bookmarkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmarkId != null) localVarPathParams.Add("bookmarkId", Configuration.ApiClient.ParameterToString(bookmarkId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmark) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmark)));
        }

        /// <summary>
        /// Returns bookmarks 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBookmarks</returns>
        public GetBookmarks GetBookmarks ()
        {
             ApiResponse<GetBookmarks> localVarResponse = GetBookmarksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns bookmarks 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBookmarks</returns>
        public ApiResponse< GetBookmarks > GetBookmarksWithHttpInfo ()
        {

            var localVarPath = "/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmarks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmarks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmarks)));
        }

        /// <summary>
        /// Returns bookmarks 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBookmarks</returns>
        public async System.Threading.Tasks.Task<GetBookmarks> GetBookmarksAsync ()
        {
             ApiResponse<GetBookmarks> localVarResponse = await GetBookmarksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns bookmarks 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBookmarks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBookmarks>> GetBookmarksAsyncWithHttpInfo ()
        {

            var localVarPath = "/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmarks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmarks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmarks)));
        }

        /// <summary>
        /// Returns bookmarks of current user 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBookmarks</returns>
        public GetBookmarks GetBookmarksSelf ()
        {
             ApiResponse<GetBookmarks> localVarResponse = GetBookmarksSelfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns bookmarks of current user 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBookmarks</returns>
        public ApiResponse< GetBookmarks > GetBookmarksSelfWithHttpInfo ()
        {

            var localVarPath = "/bookmarks/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmarksSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmarks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmarks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmarks)));
        }

        /// <summary>
        /// Returns bookmarks of current user 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBookmarks</returns>
        public async System.Threading.Tasks.Task<GetBookmarks> GetBookmarksSelfAsync ()
        {
             ApiResponse<GetBookmarks> localVarResponse = await GetBookmarksSelfAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns bookmarks of current user 
        /// </summary>
        /// <exception cref="IO.Directus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBookmarks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBookmarks>> GetBookmarksSelfAsyncWithHttpInfo ()
        {

            var localVarPath = "/bookmarks/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookmarksSelf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookmarks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookmarks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookmarks)));
        }

    }
}
